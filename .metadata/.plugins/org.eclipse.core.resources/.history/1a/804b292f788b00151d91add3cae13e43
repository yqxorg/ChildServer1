package com.zhuika.server;

import java.nio.charset.Charset;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.concurrent.ExecutorService;

import org.apache.log4j.Logger;

import com.common.ejb.EjbCmdData;
import com.users.ejb.EjbEnum.MqLogType;
import com.zhuika.dao.DAOException;
import com.zhuika.entity.SerialNumber;
import com.zhuika.service.DownMessageService;
import com.zhuika.service.ListenService;
import com.zhuika.service.LocationService;
import com.zhuika.service.ManualLocationService;
import com.zhuika.service.OnLineService;
import com.zhuika.service.PedometerService;
import com.zhuika.service.SerialNumberService;
import com.zhuika.util.ByteConverter;
import com.zhuika.util.CommonUtil;
import com.zhuika.util.Hex;
import com.zhuika.util.RestCall;
import com.zhuika.util.ejbproxy;

import io.netty.buffer.ByteBuf;
import io.netty.channel.Channel;
import io.netty.channel.ChannelHandlerContext;
import io.netty.channel.SimpleChannelInboundHandler;
import io.netty.handler.timeout.IdleStateEvent;
import io.netty.channel.ChannelHandler.Sharable;

/**
 * Handles a server-side channel.
 */
@Sharable
public class DiscardServerHandler extends SimpleChannelInboundHandler<Object> {
	private static Map<String, Channel> map = new HashMap<String, Channel>();
	private ExecutorService executorService;	
	static Logger logger = Logger.getLogger(DiscardServerHandler.class);

	public DiscardServerHandler() {

	}

	public DiscardServerHandler(ExecutorService executorService) {
		this.executorService = executorService;
	}
    /**
     * 心跳处理
     */
	@Override
	public void userEventTriggered(ChannelHandlerContext ctx, Object evt)
			throws Exception {
		if (evt instanceof IdleStateEvent) {
			
			RemoveChannel(ctx,0);	
			
//			String key = null;
//			if (map.containsValue(ctx.channel())) {
//				for (Entry<String, Channel> entries : map.entrySet()) {
//					if (entries.getValue() == ctx.channel()) {
//						key = entries.getKey();
//					}
//				}
//			} 
//			if (key != null) {
//				Iterator<String> it = map.keySet().iterator();
//				while (it.hasNext()) {
//					String serialNumber = it.next();
//					if (key.equals(serialNumber)) {
//						it.remove();
//						map.remove(serialNumber);						
//						logger.info("removed,map.size():" + map.size()+",serialNumber offline:"+serialNumber);
//						//判断设备下线
//						OnLineService.getOffLine(key);						
//					}
//				}
//			}
			ctx.channel().close();
		} else {
			super.userEventTriggered(ctx, evt);
		}
	}

	@Override
	public void channelRead0(final ChannelHandlerContext ctx, Object msg)
			throws Exception {
		ByteBuf in = (ByteBuf) msg;
		
		byte[] bytes =in.array();		
		String sInfo = Hex.encodeHexStr(bytes);

		logger.info(String.format("Child received:%s", sInfo));	
		
		// 接收到包的长度
		int length = in.readableBytes();
		// 终端设备上报到服务器位始 $$
		String head = in.readBytes(2).toString(Charset.defaultCharset());
		if ("$$".equals(head)) {
			// 从包的字段得到包的长度
			short l = in.readShort();
			if(length==l){
				// 得到产品id 序列号
				final String serialNumber = byteToArray(in.readBytes(7).array());
				// 得到协议号
				final String agreement = byteToArray(in.readBytes(2).array());
				// 得到数据
				final String content = operation(serialNumber, head, length, l,
						agreement, in, ctx);
				// 得到校验位 checksum
				String checksum = byteToArray(in.readBytes(2).array());
				
				byte[] byteCrc = CommonUtil.ComputeCRC(bytes,length-4);
				String strCacCrc = byteToArray(byteCrc);
				
				logger.info(String.format("$$crc check,crc read:%s,calculate:%s,agreement:%s,serialNumber:%s", checksum,strCacCrc,agreement,serialNumber));	
//				
//				if(checksum.equals(strCacCrc) 
//						|| (checksum.substring(0, 2).equals(strCacCrc.substring(0, 2))
//						&& strCacCrc.substring(2, 4).equals("FF")))
//				{
//					logger.info(String.format("$$crc check ok,crc read:%s,calculate:%s", checksum,strCacCrc));	
//				}
								
				// 得到结束符\r\n
				final String end = byteToArray(in.readBytes(2).array());
				executorService.execute(new Runnable() {
					public void run() {
						try {
							serviceHandler(ctx, serialNumber, agreement, content,
									end);
						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
				});
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");			
				if (!map.containsKey(serialNumber)) {
					map.put(serialNumber, ctx.channel());
					//设备上线
					OnLineService.getOnLine(serialNumber);					
				}	
			}							
		} else if ("@@".equals(head)) {
			// 从包的字段得到包的长度
			short l = in.readShort();
			// 得到产品id 序列号
			final String serialNumber = byteToArray(in.readBytes(7).array());
			// 得到协议号
			final String agreement = byteToArray(in.readBytes(2).array());
			// 得到数据
			final String content = byteToArray(in.readBytes(l - 17).array());
			// 得到校验位 checksum
			String checksum = byteToArray(in.readBytes(2).array());
			
			byte[] byteCrc = CommonUtil.ComputeCRC(bytes,length-4);
			String strCacCrc = byteToArray(byteCrc);
			
			logger.info(String.format("@@crc check,crc read:%s,calculate:%s,agreement:%s,serialNumber:%s", checksum,strCacCrc,agreement,serialNumber));
			
			// 得到结束符\r\n
			String end = byteToArray(in.readBytes(2).array());
			//final String infoToMq = "40400012" + serialNumber + agreement + content+ strCacCrc + "0d0a";			
			final String infoToMq = ByteConverter.GetSendData(serialNumber, agreement, content, true);
						
			//发送到消息队列			
			if (map.containsKey(serialNumber)) {									
				//除了加入队列外，继续发送
				executorService.execute(new Runnable() {					
					public void run() {
						//加入到消息队列
					    DiscardServer.activeSender.sendToMq(infoToMq);						
					}
				});				
			}
			else{
				ejbproxy.saveToLog(serialNumber, agreement, infoToMq, MqLogType.offlinesubmit, "首次发送，设备离线，不发送", content);
			}
			
//			try {
//				serviceDownHandler(ctx,serialNumber,agreement,content,"0d0a");
//			} catch (Exception e) {
//				// TODO Auto-generated catch block
//				logger.error("serviceDownHandler 错误"+e.toString());
//			}
		}
	}
	
	@Override
	public void channelInactive(ChannelHandlerContext ctx) throws Exception {
		// 关闭，等待重连
	    ctx.close();

	    RemoveChannel(ctx,1);	    
	    //System.out.println("===服务端===(客户端失效)");
	    
	    logger.info("===channelInactive, off line===");
	}
	
	//服务器主动发送信息或对超时数据处理
	public static void SendToClient(String serialNumber,String cmd,String sendChar,byte[] sendByte,boolean isWaitForAck)
	{		
		byte[] bToSend =null;
		if(sendByte!=null && sendByte.length>0){
			bToSend = sendByte;
		}
		else if(sendChar!=null && sendChar.length()>0 && sendByte==null){
			bToSend = HexString2Bytes(sendChar);
		}
		
		if(map.containsKey(serialNumber)){	
			map.get(serialNumber).writeAndFlush(bToSend);			
		}
		else{
			if(isWaitForAck==Boolean.TRUE){
				ejbproxy.saveToLog(serialNumber, cmd, sendChar, MqLogType.offlinequeue, "队列发送，设备离线", "");		
			}
			//throw exception
		}
		if(isWaitForAck==Boolean.TRUE){
		//增加到重发队列，等待ack返回
			String ack="";
			NettyServerHandler.AddToMapSet(serialNumber, cmd, ack,bToSend);	
		}				
	}

//	protected void serviceDownHandler(ChannelHandlerContext ctx,
//			String serialNumber, String agreement, String content, String end)
//			throws Exception {
//		if ("7103".equals(agreement)) {
//			//上传手机号号码：4040 001c 30020000000014 7103 3133373133363839313332 a12a 0d0a
//			SerialNumberService.updateSerialNumberPhone(serialNumber,content);
//			
//			logger.info(String.format("7103 serviceDownHandler received:%s", "上传手表号码"));							
//		} 
//		else if ("7102".equals(agreement)) {
//			//上传手机号号码：4040 001c 30020000000014 7103 3133373133363839313332 a12a 0d0a
//			SerialNumberService.updateSerialNumberLostInfo(serialNumber, content);
//			
//			logger.info(String.format("7102 serviceDownHandler received:%s", "上传手表号码"));							
//		} 
//		
//	}
	
	protected void serviceHandler(ChannelHandlerContext ctx,
			String serialNumber, String agreement, String content, String end)
			throws Exception {
		if ("0001".equals(agreement)) {
			//下发心跳包
			DownMessageService.downMessage(ctx, serialNumber, agreement, end);
		} else if ("9991".equals(agreement)) {
			//下发时间给设备
			DownMessageService.downMessage(ctx, serialNumber, agreement, end);
			//根据9991，判断设备上线
			getOnLine(ctx, serialNumber, content);
		} else if ("9982".equals(agreement)) {
			//手动定位
			ManualLocationService.getRealTimePosition(serialNumber, content);
			ejbproxy.saveToReceived(serialNumber, agreement, content, "", "手动定位", "");	
		} else if ("4130".equals(agreement)) {
			//监听
			ListenService.getListen(serialNumber, content);
			ejbproxy.saveToReceived(serialNumber, agreement, content, "", "监听", "");	
		} else if ("7101".equals(agreement)) {
			//计步器
			PedometerService.getPedoMeter(serialNumber, content);
//			ejbproxy.saveToReceived(serialNumber, agreement, content, "", "计步器", "");	
		} else if("7200".equals(agreement)){
			//设备下线
			getOffline(serialNumber);
			ejbproxy.saveToReceived(serialNumber, agreement, content, "", "设备下线", "");		
		} else if("9955".equals(agreement)){
			//上传位置信息
			LocationService.getLocation(ctx, serialNumber, content, end);					
		} else if ("7102".equals(agreement)) {
			// 脱落  2424001330020000000001 7102 3120 1cab 0d0a
			// $$<L><ID><0x7102><Flag>< checksum>\r\n
			SerialNumberService.updateSerialNumberLostInfo(serialNumber, content);
			
			DownMessageService.downMessage(ctx, serialNumber, agreement, end);
//			
//			logger.info(String.format("7102 serviceHandler received:%s", "脱落"));	
			
			ejbproxy.saveToReceived(serialNumber, agreement, content, "", "脱落", "");
			ejbproxy.saveDetach(serialNumber, content);
			
		}   //设备通知服务器回拨指令
		else if ("7105".equals(agreement)) {
			// $$<L><ID><0x7105><data>< checksum >\r\n
			//<data>= index,number (索引,号码) 
			String[] arrContent = null;
			String fromNum = "";
			String toNum = "";
						
			if(content!=null && content.length()>0)
			{
				String contentChar = new String(Hex.decodeHex(content.toCharArray()));				
				if(contentChar.indexOf(",")>0){
					arrContent=contentChar.split(",");				
					if(arrContent!=null &&arrContent.length==2)
					{
						toNum = arrContent[1];
					}
				}
			}
			String result = "";						
			SerialNumber serialNunmber = SerialNumberService.findSerialNumberInfo(serialNumber);
			if(serialNunmber!=null && serialNunmber.getFphonenum()!=null&& !serialNunmber.getFphonenum().equals("")){
				
				fromNum = serialNunmber.getFphonenum();						
				result = RestCall.restCallBack(fromNum, toNum,true);	
				logger.info(String.format("7105 Call Result:%s,content:%s,fromNum:%s,toNum:%s", result,content,fromNum,toNum));
			}
			else{
				logger.error("7105 Call imei or phonenumber empty");
			}
			
			logger.info(String.format("7105 serviceHandler received:%s,content:%s,phonemNum:%s", "设备通知服务器回拨指令",content,toNum));				
			DownMessageService.downMessage(ctx, serialNumber, agreement, end);
			
			if(result!=null && result.length()>400)
			{
				result = result.substring(0,400);
			}
//			String result = RestCall.restCallBack("13713975317", "075561355202");  //18058149508 075561355202
//			logger.info(String.format("7105 Call Result:%s,content:%s,toNum:%s", result,content,toNum));			
			
			String msgRemark = String.format("回拨请求,from:%s,To:%s,result:%s", fromNum,toNum,result);
			ejbproxy.saveToReceived(serialNumber, agreement, content, "", msgRemark, "");
														
		}   //ack
		else if ("7106".equals(agreement)
				||"7104".equals(agreement)||"7108".equals(agreement)
				||"7103".equals(agreement)||"4102".equals(agreement)
				||"2001".equals(agreement)||"2002".equals(agreement)
				||"7109".equals(agreement)) {
			
			 
			String resCmdInfo = EjbCmdData.getCmdNameByCmd(agreement);	
			if(content!=null&&content.equals(""))
			{
				 String info = new String(Hex.decodeHex(content.toCharArray()));
			}
			ejbproxy.saveToReceived(serialNumber, agreement, content, "", "应答ack,"+resCmdInfo, "");		
			
			String ack="";
			NettyServerHandler.DeleteSetForAck(serialNumber,agreement,ack,true);
			
			logger.info(String.format("response return, sn:%s,cmd:%s,content:%s", serialNumber,agreement,content));	
		}	
		else
		{
			String resCmdInfo = EjbCmdData.getCmdNameByCmd(agreement);			
			ejbproxy.saveToReceived(serialNumber, agreement, content, "", "应答ack,"+resCmdInfo, "");	
		}
	}
	  private void RemoveChannel(ChannelHandlerContext ctx,int type)
	  {
		  String key = null;
			if (map.containsValue(ctx.channel())) {
				for (Entry<String, Channel> entries : map.entrySet()) {
					if (entries.getValue() == ctx.channel()) {
						key = entries.getKey();
					}
				}
			} 
			if (key != null) {
				Iterator<String> it = map.keySet().iterator();
				while (it.hasNext()) {
					String clinumber = it.next();
					if (key.equals(clinumber)) {
						it.remove();
						map.remove(clinumber);											
						logger.info("removed,map.size():" + map.size()+",serialNumber offline:"+clinumber+"type:"+type);
						OnLineService.getOffLine(key);
					}
				}
			}
	  }
	
	/**
	 * 通过上行的指令7200 判断设备下线	
	 * @param serialNumber
	 * @throws DAOException
	 */
	private void getOffline(String serialNumber) throws DAOException {
		if (map.containsKey(serialNumber)) {
			Iterator<String> it = map.keySet().iterator();
			while (it.hasNext()) {
				String key = it.next();
				if (serialNumber.equals(key)) {
					it.remove();
					map.remove(serialNumber);
//					System.out.println("踢下线:" + key);
//					System.out.println("map.size():" + map.size());
					OnLineService.getOffLine(key);
				}
			}
		}
	}
    /**
     * 通过上行的指令9991 判断设备上线	
     * @param ctx
     * @param serialNumber
     * @param content
     * @throws DAOException
     */
	private void getOnLine(ChannelHandlerContext ctx, String serialNumber,
			String content) throws DAOException {
		SerialNumberService.getDefaultInfo(serialNumber, content);
		if (map.containsKey(serialNumber)) {
			Iterator<String> it = map.keySet().iterator();
			while (it.hasNext()) {
				String key = it.next();
				if (serialNumber.equals(key)) {
					it.remove();
					map.remove(serialNumber);
				}
			}
		} else {
			map.put(serialNumber, ctx.channel());			
			System.out.println("map.size():" + map.size());
			System.out.println("99919991");
			System.out.println("设备:" + serialNumber + "上线了");
			
			logger.info("device:" + serialNumber + "getOnLine--");
			//设备上线
			OnLineService.getOnLine(serialNumber);			
		}
	}

	/**
	 * 根据上行的指令解析数据	
	 * @param serialNumber
	 * @param head
	 * @param length
	 * @param l
	 * @param agreement
	 * @param in
	 * @param ctx
	 * @return
	 * @throws DAOException
	 * @throws ParseException
	 */
	private String operation(String serialNumber, String head, int length,
			short l, String agreement, ByteBuf in, ChannelHandlerContext ctx)
			throws DAOException, ParseException {
		String content = null;
		if ("7101".equals(agreement) && length == l) {
			
			content = byteToArray(in.readBytes(l - 17).array());	
		} else if ("5100".equals(agreement) || "4106".equals(agreement)
				|| "9965".equals(agreement) || "3104".equals(agreement)
				|| "2001".equals(agreement) || "2002".equals(agreement)
				|| "2003".equals(agreement) || "9990".equals(agreement)
				|| "9992".equals(agreement) && length == l) {
			byteToArray(in.readBytes(1).array());			
			content = byteToArray(in.readBytes(l - 18).array());						
			//String info = new String(Hex.decodeHex(content.toCharArray()));
		
		} else if ("9991".equals(agreement) && "$$".equals(head) && length == l) {

			content = byteToArray(in.readBytes(l - 17).array());
			
			 String info = new String(Hex.decodeHex(content.toCharArray()));				 
			 logger.info(String.format("9991 time synchronization received:%s", info));	
			 
		} else if ("9982".equals(agreement) && "$$".equals(head) && length == l) {

			content = byteToArray(in.readBytes(l - 17).array());
		} else if ("4130".equals(agreement) && "$$".equals(head)) {

			byteToArray(in.readBytes(1).array());
			content = byteToArray(in.readBytes(l - 18).array());
		} 
		else if ("7102".equals(agreement)) {
			// 脱落  2424001330020000000001 7102 3120 1cab 0d0a
			// $$<L><ID><0x7102><Flag>< checksum>\r\n
			// SerialNumberService.updateSerialNumberLostInfo(serialNumber, content);
			content = byteToArray(in.readBytes(l - 17).array());
			logger.info(String.format("7102 operation 1 received:%s", "脱落"));							
		} 		
		else if ("7105".equals(agreement)) {
			// $$<L><ID><0x7105><data>< checksum >\r\n
			//<data>= index,number (索引,号码)	
			content = byteToArray(in.readBytes(l - 17).array());
			logger.info(String.format("7105 operation 1 received:%s", "设备通知服务器回拨指令"));							
		} else {				
			content = byteToArray(in.readBytes(l - 17).array());
			
			 if ("9955".equals(agreement)){
				 String info = new String(Hex.decodeHex(content.toCharArray()));				 
				 logger.info(String.format("9955 location data received:%s", info));	
			 }
//			System.out.println(content);
//			System.out.println(info);			
		}
		return content;
	}	

	
	@Override
	public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {
		// Close the connection when an exception is raised.
		cause.printStackTrace();
		// ctx.close();
	}
    
	public static String byteToArray(byte[] data) {
		String result = "";
		for (int i = 0; i < data.length; i++) {
			result += Integer.toHexString((data[i] & 0xFF) | 0x100)
					.toUpperCase().substring(1, 3);
		}
		return result;
	}

	// 从十六进制字符串到字节数组转换
	private static byte[] HexString2Bytes(String hexstr) {
		byte[] b = new byte[hexstr.length() / 2];
		int j = 0;
		for (int i = 0; i < b.length; i++) {
			char c0 = hexstr.charAt(j++);
			char c1 = hexstr.charAt(j++);
			b[i] = (byte) ((parse(c0) << 4) | parse(c1));
		}
		return b;
	}

	private static int parse(char c) {
		if (c >= 'a')
			return (c - 'a' + 10) & 0x0f;
		if (c >= 'A')
			return (c - 'A' + 10) & 0x0f;
		return (c - '0') & 0x0f;
	}
}
