package com.zhuika.server;

import java.io.UnsupportedEncodingException;

import javax.ejb.MessageDriven;
import javax.jms.Connection;
import javax.jms.Destination;
import javax.jms.JMSException;
import javax.jms.Message;
import javax.jms.MessageConsumer;
import javax.jms.MessageListener;
import javax.jms.Session;
import javax.jms.TextMessage;
import org.apache.activemq.ActiveMQConnectionFactory;
import org.apache.log4j.Logger;
import org.apache.log4j.PropertyConfigurator;

import com.users.ejb.EjbEnum.MqLogType;
import com.zhuika.util.ejbproxy;

public class ActiveMqReceiver  implements Runnable {

	private static final Logger logger = Logger.getLogger(ActiveMqReceiver.class);

	private Connection connection;
	private String subject = "Wearme.DEFAULTMQ";
	private ActiveMQConnectionFactory connectionFactory;
	private Session session;
	private Destination destination;
	private MessageConsumer consumer;

	//quality
	private String filterName;
	ActiveMqReceiver(String filter) {
        this.filterName = filter;
   }

	
	@Override
	public void run() {
		// TODO Auto-generated method stub
		try {
			startMQConn();
		} catch (JMSException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		logger.info("mq接收线程完成,filterName="+filterName);
	}
	
	private void startMQConn() throws JMSException {
		connectionFactory = new ActiveMQConnectionFactory("failover:tcp://localhost:61616");
		// 创建connection
		connection = connectionFactory.createConnection();
		connection.start();
		// 创建session
		session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
		destination = session.createQueue(subject);
		//consumer = session.createConsumer(destination);
		consumer = session.createConsumer(destination, "filter='"+ this.filterName+"'");	
		//this.BlockToReceive();
		this.OnMsgReceive();
	}



	//阻塞接收
	private void BlockToReceive() {
		try {
			while (true) {
				Message msg = consumer.receive(2000);
				TextMessage textMsg = (TextMessage) msg;
				if (null != msg) {
					try {	
						String receiveText = textMsg.getText();						
						msg.clearProperties();	
						recHandle(receiveText);
																	
					} catch (JMSException e) {
						logger.error("mq consume JMSException：" + e.toString());
						// TODO Auto-generated catch block
						e.printStackTrace();

					} catch (Exception e) {
						logger.error("mq consume Exception：" + e.toString());
						// TODO Auto-generated catch block
						e.printStackTrace();
					}				
				}
			}
		} catch (JMSException e) {
			// TODO Auto-generated catch block
			logger.error("JMSException");
			try {
				this.close();
			} catch (Throwable ignore) {
			}
			e.printStackTrace();
		}
	}

	//通知receive
	private void OnMsgReceive() {
		try {
			consumer.setMessageListener(new Listener());			
			logger.info("ansynchroReceive");
		} catch (JMSException e) {
			// TODO Auto-generated catch block
			logger.error("ansynchroReceive JMSException"+e.toString());
			try {
	            this.close();
	        } catch (Throwable ignore) {
	        }
			e.printStackTrace();
		}
	}
	private class Listener implements MessageListener {
		public void onMessage(Message message) {
				TextMessage textMsg = (TextMessage) message;	
				try {
					String receiveText = textMsg.getText();						
					message.clearProperties();						
					recHandle(receiveText);					
					
				} catch (JMSException e) {
					logger.error("mq consume JMSException："+e.toString());  
					// TODO Auto-generated catch block				
					e.printStackTrace();
				}
				
				try {
					Thread.sleep(500);
				} catch (InterruptedException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
	
			}
	}
	private void recHandle(String receiveText)
	{		
		logger.info("Received:"+receiveText+";currentThread:"+Thread.currentThread().getId());
		
		if(receiveText.length()>26){
			String snnumber = receiveText.substring(8, 22);
			String cmd = receiveText.substring(22, 26);		
			String ack="";
			//发送
			DiscardServerHandler.SendToClient(snnumber, cmd, receiveText, null,true);						
			logger.info(String.format("received sn:%s,cmd:%s,data:%s",snnumber,cmd, receiveText));						
			//添加到重发队列
			ActiveMqReceiver.SendRepeatByAck(snnumber,cmd,ack,receiveText);	
		}
	}
	
	
	private static void SendRepeatByAck(String clientNum, String cmd,String ack,String sendChar)
	  {
		boolean bkeyExist  = Boolean.FALSE;
		
		try {
			Thread.sleep(3000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		bkeyExist = NettyServerHandler.DeleteSetForAck(clientNum, cmd, ack,false);
		//如ack还没返回
		if(bkeyExist == Boolean.TRUE)
		{
			//发送
			DiscardServerHandler.SendToClient(clientNum, cmd, sendChar, null,false);	
			logger.info(String.format("一次ACK没返回：%s,%s,%s", clientNum, cmd, sendChar));  
		}
		else
		{
			logger.info(String.format("一次ACK已返回：%s,%s,%s", clientNum, cmd, sendChar));  
			return ;
		}
		
		try {
			Thread.sleep(3000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		bkeyExist = NettyServerHandler.DeleteSetForAck(clientNum, cmd, ack,false);
		if(bkeyExist == Boolean.TRUE)
		{
			//发送
			DiscardServerHandler.SendToClient(clientNum, cmd, sendChar, null,false);	
			logger.info(String.format("二次ACK没返回：%s,%s,%s", clientNum, cmd, sendChar));  
		}
		else
		{
			logger.info(String.format("二次ACK已返回：%s,%s,%s", clientNum, cmd, sendChar));  
			return ;
		}
		try {
			Thread.sleep(3000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		bkeyExist = NettyServerHandler.DeleteSetForAck(clientNum, cmd, ack,false);
		if(bkeyExist == Boolean.TRUE)
		{
			//发送失败，记录异常信息
			ejbproxy.saveToLog(clientNum, cmd, sendChar, MqLogType.timeout, "三次ACK没返回", "");
			
			logger.info(String.format("三次ACK没返回，记录异常：%s,%s,%s", clientNum, cmd, sendChar));  
		}
		else
		{
			logger.info(String.format("三次ACK已返回：%s,%s,%s", clientNum, cmd, sendChar));  
		}
		
	  }
	private void close() throws JMSException {
		if (consumer != null) {
			consumer.close();
			consumer =null;
		}
		if (connection != null) {
			connection.stop();
			connection.close();
			connection =null;
		}
		if (session != null) {
			session.close();
			session =null;
		}
		System.out.println("关闭资源。。。。");
	}

//	private static void receiveMsg()
//	{
//		ActiveMqReceiver receive = new ActiveMqReceiver("quality");
//		try {
//			receive.startMQConn();
//		} catch (JMSException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
//	}
	public static void main(String[] args) {
		PropertyConfigurator.configure("log4j.properties");
		//receiveMsg();
		
		ActiveMqReceiver receive1= new ActiveMqReceiver("quality");
        Thread thread1= new Thread(receive1);
        thread1.start();
        
    	ActiveMqReceiver receive2= new ActiveMqReceiver("quality123");
        Thread thread2= new Thread(receive2);
        thread2.start();

	}

}
