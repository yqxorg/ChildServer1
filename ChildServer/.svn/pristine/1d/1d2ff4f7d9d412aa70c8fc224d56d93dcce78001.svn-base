/*
 * Copyright 2012 The Netty Project
 *
 * The Netty Project licenses this file to you under the Apache License,
 * version 2.0 (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at:
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */
package com.zhuika.server;



import java.util.concurrent.TimeUnit;

import io.netty.bootstrap.ServerBootstrap;
import io.netty.channel.ChannelFuture;
import io.netty.channel.ChannelInitializer;
import io.netty.channel.ChannelPipeline;
import io.netty.channel.EventLoopGroup;
import io.netty.channel.nio.NioEventLoopGroup;
import io.netty.channel.socket.SocketChannel;
import io.netty.channel.socket.nio.NioServerSocketChannel;
import io.netty.handler.codec.DelimiterBasedFrameDecoder;
import io.netty.handler.timeout.IdleStateHandler;

import org.apache.log4j.Logger;
import org.apache.log4j.PropertyConfigurator;

import com.zhuika.entity.Config;
import com.zhuika.util.XMLReader;


/*
 * 在Netty 4中实现了一个新的ByteBuf内存池，
 * 它是一个纯Java版本的 jemalloc （Facebook也在用）。
 * 现在，Netty不会再因为用零填充缓冲区而浪费内存带宽了。
 * 不过，由于它不依赖于GC，开发人员需要小心内存泄漏。
 * 如果忘记在处理程序中释放缓冲区，那么内存使用率会无限地增长。
 * Netty默认不使用内存池，需要在创建客户端或者服务端的时候进行指定，代码如下：
 * .option(ChannelOption.ALLOCATOR, PooledByteBufAllocator.DEFAULT)
 * 使用内存池之后，内存的申请和释放必须成对出现，
 * 即retain()和release()要成对出现，否则会导致内存泄露。
 * 值得注意的是，如果使用内存池，
 * 完成ByteBuf的解码工作之后必须显式的调用ReferenceCountUtil.release(msg)
 * 对接收缓冲区ByteBuf进行内存释放，否则它会被认为仍然在使用中，这样会导致内存泄露。
 */



/**
 * Discards any incoming data.
 */
public final class DiscardServer {

    
//    static final int PORT = Integer.parseInt(System.getProperty("port", "6666"));
  

    public static void main(String[] args) throws Exception {
    	
    	PropertyConfigurator.configure("log4j.properties");
    	
    	Logger logger = Logger.getLogger(DiscardServer.class); // Server为类名
    	  
		ActiveMqReceiver receive1= new ActiveMqReceiver("quality");
        Thread thread1= new Thread(receive1);
        thread1.start();
        
    	logger.info("begin to start TCP server...");   	
    	DiscardServer.run();
    }
    
	protected static void run() throws Exception {
		
	   EventLoopGroup bossGroup = new NioEventLoopGroup(1);
        EventLoopGroup workerGroup = new NioEventLoopGroup();
        try {
            ServerBootstrap b = new ServerBootstrap();
            b.group(bossGroup, workerGroup)
             .channel(NioServerSocketChannel.class)
             /*
              * AdaptiveRecvByteBufAllocator：容量动态调整的接收缓冲区分配器，
              * 它会根据之前Channel接收到的数据报大小进行计算，
              * 如果连续填充满接收缓冲区的可写空间，则动态扩展容量。
              * 如果连续2次接收到的数据报都小于指定值，则收缩当前的容量，以节约内存。
              * 如果默认没有设置，则使用AdaptiveRecvByteBufAllocator。
              */
             //.option(ChannelOption.RCVBUF_ALLOCATOR, AdaptiveRecvByteBufAllocator.DEFAULT)
             //.handler(new LoggingHandler(LogLevel.INFO))
             .childHandler(new ChannelInitializer<SocketChannel>() {
                 @Override
                 public void initChannel(SocketChannel ch) {
                     ChannelPipeline p = ch.pipeline(); 
                     p.addLast(new IdleStateHandler(0, 0, 150, TimeUnit.SECONDS));
                     p.addLast("framer",new DelimiterBasedFrameDecoder(8192, false,Delimiters.lineDelimiter()));
                     p.addLast(new ByteToMessageDec());
                     p.addLast(new MessageToByteEnc());             
                     p.addLast(ServiceHandlerFactory.getDiscardServerHandler());
                 }
             });
            
			Logger logger = Logger.getLogger(DiscardServer.class); // Server为类名
			Config config = XMLReader.loadconfig();
			String socketip = config.socketip;
			String socketport = config.socketport;
			
            // Bind and start to accept incoming connections.
//            ChannelFuture f = b.bind(PORT).sync();
            ChannelFuture f = b.bind(socketip, Integer.parseInt(socketport)).sync();		
            
            logger.info("TCP server started successfully");

            // Wait until the server socket is closed.
            // In this example, this does not happen, but you can do that to gracefully
            // shut down your server.
            f.channel().closeFuture().sync();
        } finally {
            workerGroup.shutdownGracefully();
            bossGroup.shutdownGracefully();
        }		
	}
}
