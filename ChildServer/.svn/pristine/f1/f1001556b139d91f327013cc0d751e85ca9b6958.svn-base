package com.zhuika.server;

import java.io.UnsupportedEncodingException;

import javax.jms.Connection;
import javax.jms.Destination;
import javax.jms.JMSException;
import javax.jms.Message;
import javax.jms.MessageConsumer;
import javax.jms.Session;
import javax.jms.TextMessage;
import org.apache.activemq.ActiveMQConnectionFactory;
import org.apache.log4j.Logger;
import org.apache.log4j.PropertyConfigurator;

public class ActiveMqReceiver {

	private static final Logger logger = Logger
			.getLogger(ActiveMqReceiver.class);

	private Connection connection;
	private String subject = "Wearme.DEFAULTMQ";
	private ActiveMQConnectionFactory connectionFactory;
	private Session session;
	private Destination destination;
	private MessageConsumer consumer;

	private void startMQConn() throws JMSException {
		connectionFactory = new ActiveMQConnectionFactory("failover:tcp://localhost:61616");
		// 创建connection
		connection = connectionFactory.createConnection();
		connection.start();
		// 创建session
		session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
		destination = session.createQueue(subject);
		consumer = session.createConsumer(destination);

		this.synchroReceive();
	}

	private void synchroReceive() {
		try {
			while (true) {
				Message msg = consumer.receive(2000);
				TextMessage textMsg = (TextMessage) msg;
				if (null != msg) {
					try {						
						System.out.println(textMsg.getText());
						String receiveText = textMsg.getText();
						String snnumber = receiveText.substring(8, 22);
						String cmd = receiveText.substring(22, 26);
						msg.clearProperties();
						
						//发送
						DiscardServerHandler.SendToClient(snnumber, cmd, receiveText, null,true);
						
						logger.info(String.format("received sn:%s,cmd:%s,data:%s",snnumber,cmd, receiveText));
						
						//添加到重发队列
						ActiveMqReceiver.SendRepeatByAck(snnumber,cmd,receiveText,null);												

					} catch (JMSException e) {
						logger.error("mq consume JMSException：" + e.toString());
						// TODO Auto-generated catch block
						e.printStackTrace();

					} catch (Exception e) {
						logger.error("mq consume Exception：" + e.toString());
						// TODO Auto-generated catch block
						e.printStackTrace();
					}				
				}
			}

			// System.out.println("同步接受消息：");
			// Message message = consumer.receive();
			// System.out.println("\n收到的message 是:"+ ((TextMessage)
			// message).getText());
			// // 关闭资源
			// message.clearProperties();

		} catch (JMSException e) {
			// TODO Auto-generated catch block
			logger.error("JMSException");
			try {
				this.close();
			} catch (Throwable ignore) {
			}
			e.printStackTrace();
		}
	}

	private static void SendRepeatByAck(String clientNum, String cmd,String ack,byte [] byteToSend)
	  {
		boolean bkeyExist  = Boolean.FALSE;
		
		try {
			Thread.sleep(3000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		bkeyExist = NettyServerHandler.DeleteSetForAck(clientNum, cmd, ack);
		//如ack还没返回
		if(bkeyExist == Boolean.TRUE)
		{
			//发送
			DiscardServerHandler.SendToClient(clientNum, cmd, ack, byteToSend,false);	
			logger.info(String.format("一次ACK没返回：%s,%s,%s", clientNum, cmd, ack));  
		}
		else
		{
			logger.info(String.format("一次ACK已返回：%s,%s,%s", clientNum, cmd, ack));  
			return ;
		}
		
		try {
			Thread.sleep(3000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		bkeyExist = NettyServerHandler.DeleteSetForAck(clientNum, cmd, ack);
		if(bkeyExist == Boolean.TRUE)
		{
			//发送
			DiscardServerHandler.SendToClient(clientNum, cmd, ack, byteToSend,false);	
			logger.info(String.format("二次ACK没返回：%s,%s,%s", clientNum, cmd, ack));  
		}
		else
		{
			logger.info(String.format("二次ACK已返回：%s,%s,%s", clientNum, cmd, ack));  
			return ;
		}
		try {
			Thread.sleep(3000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		bkeyExist = NettyServerHandler.DeleteSetForAck(clientNum, cmd, ack);
		if(bkeyExist == Boolean.TRUE)
		{
			//发送失败，记录异常信息
			logger.info(String.format("三次ACK没返回，记录异常：%s,%s,%s", clientNum, cmd, ack));  
		}
		else
		{
			logger.info(String.format("三次ACK已返回：%s,%s,%s", clientNum, cmd, ack));  
		}
		
	  }
	private void close() throws JMSException {
		if (consumer != null) {
			consumer.close();
			consumer =null;
		}
		if (connection != null) {
			connection.stop();
			connection.close();
			connection =null;
		}
		if (session != null) {
			session.close();
			session =null;
		}
		System.out.println("关闭资源。。。。");
	}

	public static void receiveMsg()
	{
		ActiveMqReceiver receive = new ActiveMqReceiver();
		try {
			receive.startMQConn();
		} catch (JMSException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	public static void main(String[] args) {
		PropertyConfigurator.configure("log4j.properties");
		receiveMsg();

	}
}
